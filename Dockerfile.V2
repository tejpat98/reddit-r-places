# Build step
FROM node:20-alpine as builder

# Set the working directory
WORKDIR /app

# Copy the package.json and package-lock.json files into the image.
COPY package*.json ./

# Install the dependencies.
RUN npm install 

# Copy the rest of the source files into the image.
COPY . .

RUN npm run build

FROM node:20-alpine as runner

ENV NODE_ENV=production

WORKDIR /app

COPY --from=builder --chown=node:node /app/package-lock.json ./
COPY --from=builder --chown=node:node /app/next.config.js ./

COPY --from=builder --chown=node:node /app/public ./public
COPY --from=builder --chown=node:node /app/src ./src

#Copy standalone output (excluding its server.js)
COPY --from=builder --chown=node:node /app/.next/standalone/.next/ ./.next
COPY --from=builder --chown=node:node /app/.next/standalone/node_modules/ ./node_modules
COPY --from=builder --chown=node:node /app/.next/standalone/package.json ./
COPY --from=builder --chown=node:node /app/.next/static ./.next/static

#Copy over socket.io (as its only referenced in the custom-server.js, which is not part of the build, hence it will not be in deps)
COPY --from=builder --chown=node:node /app/node_modules/socket.io ./node_modules/socket.io

#Copy over custom server to replace the standalone outputs' server.js
COPY --from=builder --chown=node:node /app/custom-server.js ./

# Expose the port that the application listens on.
EXPOSE 3000

#define URI and DB name 
ENV MONGODB_URI: ${MONGODB_URI}
ENV DB_NAME: ${DB_NAME}

# Run the application. 
CMD ["node", "custom-server.js"]